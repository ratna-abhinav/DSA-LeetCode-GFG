#define ll long long
const ll INF = 1e18;

struct node {
	ll sum, maxPrefSum, maxSuffSum, maxSubSum;

	node () {
		sum = 0;
		maxPrefSum = -INF;
		maxSuffSum = -INF;
		maxSubSum = -INF;
	}

	node(int val) {
		this->sum = val;
		this->maxPrefSum = val;
		this->maxSuffSum = val;
		this->maxSubSum = val;
	}
};

template <class T, class U>
struct SegTree
{
	vector<T> ST;
	vector<U> LAZY;
	ll n;
	T IDENTITY_ELEMENT;
	U IDENTITY_UPDATE;

	/*
			Definition of IDENTITY_ELEMENT: the element I such that combine(x,I) = x
			for all x

			Definition of IDENTITY_UPDATE: the element I such that apply(x,I) = x
			for all x
	*/

	SegTree(ll n, T IDENTITY_ELEMENT, U IDENTITY_UPDATE)
	{
		this->n = n;
		this->IDENTITY_ELEMENT = IDENTITY_ELEMENT;
		this->IDENTITY_UPDATE = IDENTITY_UPDATE;
		ST.assign(4 * n, IDENTITY_ELEMENT);
		LAZY.assign(4 * n, IDENTITY_UPDATE);
	}

	// merge the answer of left and right child to get the answer that we want to store in the current node
	T combine(T l, T r)
	{
		T ans;
		ans.sum = l.sum + r.sum;
		ans.maxPrefSum = max(l.maxPrefSum, l.sum + r.maxPrefSum);
		ans.maxSuffSum = max(r.maxSuffSum, r.sum + l.maxSuffSum);
		ans.maxSubSum = max({l.maxSubSum, r.maxSubSum, l.maxSuffSum + r.maxPrefSum});
		return ans;
	}

	void buildUtil(ll v, ll tl, ll tr, vector<int> &arr)
	{
		if (tl == tr)
		{
			ST[v] = arr[tl];
			return;
		}
		ll tm = (tl + tr) >> 1;
		buildUtil(2 * v + 1, tl, tm, arr);
		buildUtil(2 * v + 2, tm + 1, tr, arr);
		ST[v] = combine(ST[2 * v + 1], ST[2 * v + 2]);
	}

	// we need to store and return the answer (depends on query type) that we want to store in the node corrosponding to the range [tl, tr] after applying the update upd
	T apply(T curSegVal, U upd, ll tl, ll tr)
	{
		// query -> sum, update -> assignment
		T ans;
		ans.sum = (tr - tl + 1) * upd;
		ans.maxPrefSum = ans.sum;
		ans.maxSuffSum = ans.sum;
		ans.maxSubSum = ans.sum;
		return ans;
	}

	// merge old and new update into one final merged update
	U combineUpdate(U old_upd, U new_upd, ll tl, ll tr)
	{
		U ans = old_upd;
		ans = new_upd;
		return ans;
	}

	void push_down(ll v, ll tl, ll tr)
	{
		// for the below line to work, make sure the "==" operator is defined for U.
		if (LAZY[v] == IDENTITY_UPDATE)
			return;
		ST[v] = apply(ST[v], LAZY[v], tl, tr);
		if (2 * v + 1 <= 4 * n)
		{
			ll tm = (tl + tr) >> 1;
			LAZY[2 * v + 1] = combineUpdate(LAZY[2 * v + 1], LAZY[v], tl, tm);
			LAZY[2 * v + 2] = combineUpdate(LAZY[2 * v + 2], LAZY[v], tm + 1, tr);
		}
		LAZY[v] = IDENTITY_UPDATE;
	}

	T queryUtil(ll v, ll tl, ll tr, ll l, ll r)
	{
		push_down(v, tl, tr);
		if (l > r)
			return IDENTITY_ELEMENT;
		if (tr < l or tl > r)
		{
			return IDENTITY_ELEMENT;
		}
		if (l <= tl and r >= tr)
		{
			return ST[v];
		}
		ll tm = (tl + tr) >> 1;
		return combine(queryUtil(2 * v + 1, tl, tm, l, r), queryUtil(2 * v + 2, tm + 1, tr, l, r));
	}

	void updateUtil(ll v, ll tl, ll tr, ll l, ll r, U upd)
	{
		push_down(v, tl, tr);
		if (tr < l or tl > r)
			return;
		if (tl >= l and tr <= r)
		{
			LAZY[v] = combineUpdate(LAZY[v], upd, tl, tr);
			push_down(v, tl, tr);
		}
		else
		{
			ll tm = (tl + tr) >> 1;
			updateUtil(2 * v + 1, tl, tm, l, r, upd);
			updateUtil(2 * v + 2, tm + 1, tr, l, r, upd);
			ST[v] = combine(ST[2 * v + 1], ST[2 * v + 2]);
		}
	}

	void build(vector<int> arr)
	{
		int sz = arr.size();
		assert(sz == n);
		buildUtil(0, 0, n - 1, arr);
	}

	T query(ll l, ll r)
	{
		return queryUtil(0, 0, n - 1, l, r);
	}

	void update(ll l, ll r, U upd)
	{
		updateUtil(0, 0, n - 1, l, r, upd);
	}
};


vector<int> solve(int n, vector<int> &arr, int q, vector<vector<int>> &queries)
{
    vector<int> nums(n+1, 0), ans;
    node idel;
    SegTree<node, int> st(n+1, idel, 0);
    for (int i = 0; i < n; i++) nums[i + 1] = arr[i];  // make array 1-based
    st.build(nums);
    for (auto q : queries)
    {
        int a = q[0] + 1, b = q[1] + 1;    // make [l, r] as 1-based
        int value = st.query(a, b).maxSubSum;
        ans.push_back(value);
    }
    return ans;
}
