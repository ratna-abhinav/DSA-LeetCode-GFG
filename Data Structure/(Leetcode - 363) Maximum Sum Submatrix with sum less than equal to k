// Matrix elements can be negative as well
// so, u cannot apply 2-pointer or binary search technique to find the maximum sum subarray with sum <= k

int maxSumSubmatrix(vector<vector<int>>& matrix, int k) {
    int n = matrix.size(), m = matrix[0].size();
    int ans = -1e9;
    for (int i=0; i<m; i++)
    {
        vector<int> cur(n, 0);
        for (int j=i; j<m; j++)
        {
            for (int t=0; t<n; t++) cur[t] += matrix[t][j];

            // find the maximum sum subarray with sum <= k
            vector<int> pf(n, 0); pf[0] = cur[0];
            for (int t=1; t<n; t++) pf[t] = pf[t-1] + cur[t];

            set<int> s; s.insert(0);
            for (int t=0; t<n; t++)
            {
                auto it = s.lower_bound(pf[t]-k);
                if (it != s.end()) ans = max(ans, pf[t]-*it);
                s.insert(pf[t]);
            }
        }
    }
    return ans;
}
