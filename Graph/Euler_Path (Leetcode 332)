// If graph as Euler Cycle, then this algorithm finds the euler cycle
// Earlier version was O(N^2), u can confirm it with Leetcode 2097
// this version is the best way and it is O(N+M)

vector<string> findItinerary(vector<vector<string>>& tickets) {
    int n = tickets.size();
    unordered_map<string, vector<string>> graph;
    unordered_map<string, int> out;
    map<pair<string,string>,int> vis, count;
    for (int i=0; i<n; i++) 
    {
        graph[tickets[i][0]].push_back(tickets[i][1]);
        count[{tickets[i][0], tickets[i][1]}]++;
        out[tickets[i][0]]++;
    }
    // do this, so that we always take the smallest neighbour first in our DFS
    for (auto &it : graph) sort(it.second.rbegin(), it.second.rend());
    vector<string> ans;

    function<void(string)> dfs = [&] (string cur)
    {
        while (out[cur] > 0)
        {
            string next = graph[cur][--out[cur]];
            dfs(next);
        }
        ans.push_back(cur);
    };
    
    dfs("JFK");
    reverse(ans.begin(), ans.end());
    return ans;
}
