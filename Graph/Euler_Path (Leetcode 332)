// If graph as Euler Cycle, then this algorithm finds the euler cycle

vector<string> findItinerary(vector<vector<string>>& tickets) {
    int n = tickets.size();
    unordered_map<string, vector<string>> g;
    unordered_map<string, int> out;
    map<pair<string,string>,int> vis, count;
    for (int i=0; i<n; i++) 
    {
        g[tickets[i][0]].push_back(tickets[i][1]);
        count[{tickets[i][0], tickets[i][1]}]++;
        out[tickets[i][0]]++;
    }
    vector<string> ans;
    
    function<void(string)> dfs = [&] (string cur)
    {
        out[cur] = max(out[cur]-1, 0);
        vector<string> next;
        for (auto nb:g[cur])
        {
            if (vis[{cur, nb}] < count[{cur, nb}]) next.push_back(nb);
        }
        sort(next.begin(), next.end());
        for (auto nb : next) 
        {
            if (vis[{cur, nb}] == count[{cur, nb}]) continue;
            vis[{cur, nb}]++;
            dfs(nb);
        }
        // push the node only if we have visited all of its edges
        // well this condition (out[cur] == 0) is implicit, cuz
        // we enter this section for cur only after visiting all of its
        // outgoing edges (or neighbors in case of normal dfs)
        // so below line is same as just writing:                 ans.push_back(cur)
        if (out[cur] == 0) ans.push_back(cur);
    };
    
    dfs("JFK");
    reverse(ans.begin(), ans.end());
    return ans;
}
