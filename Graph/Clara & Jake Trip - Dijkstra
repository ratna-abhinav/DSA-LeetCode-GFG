#include <bits/stdc++.h>
using namespace std;

#define int long long
int tt;
void solve();

void IO()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	freopen("Error.txt", "w", stderr);
#endif
}

void testcase(int t)
{
	cin >> t;
	while (t--)
		solve();
}

typedef long long ll;
typedef long double lld;

#define ff first
#define ss second
#define pi pair<int, int>
#define vi vector<int>
#define vs vector<string>
#define vc vector<char>
#define pv pair<vi, vi>
#define vpi vector<pi>
#define vvi vector<vi>
#define vvc vector<vc>
#define vvvi vector<vvi>
#define vvvvi vector<vvvi>
#define vvpi vector<vpi>
#define vvvpi vector<vvpi>
#define pb push_back
#define mp make_pair
#define arr(k) array<int, k>
#define var(k) vector<arr(k)>
#define all(v) v.begin(), v.end()
#define unq(v) v.erase(unique(all(v)), v.end());
#define len(v) (int)v.size()
#define rep(i, a, b) for (int i = a; i < b; i++)
#define each(nb, x) for (auto &nb : x)
#define pll pair<ll, ll>
#define vll vector<ll>
#define vpll vector<pll>
#define vvll vector<vll>

/*  ------------------------    BASIC INPUT -------------------------------  */

void read() {}
void read(int &a) { cin >> a; }
void read(string &s) { cin >> s; }
void read(double &a) { cin >> a; }
void read(lld &a) { cin >> a; }
template <typename x, typename y>
void read(pair<x, y> &a) { read(a.first), read(a.second); }
template <typename x>
void read(x &a)
{
	for (auto &i : a)
		read(i);
}
template <typename x, typename... y>
void read(x &a, y &...b)
{
	read(a);
	read(b...);
}
template <class T>
void cmin(T &a, T b) { a = min(a, b); }
template <class T>
void cmax(T &a, T b) { a = max(a, b); }

/*    ------------------------------------------------------------------   */

/* -------------------------------------  DEBUG STARTS ------------------------------- */

#ifndef ONLINE_JUDGE
#define dbg(x)         \
	cerr << #x << " = "; \
	_print(x);           \
	cerr << endl;
#else
#define dbg(x)
#endif

void print(int t)
{
	cout << t;
}
void print(string t) { cout << t; }
void print(char t) { cout << t; }
void print(lld t) { cout << t; }
void print(double t) { cout << t; }
void print(bool t) { cout << t; }
void print(deque<int> t)
{
	while (not t.empty())
	{
		cout << t.front() << ' ';
		t.pop_front();
	}
}
void print(queue<int> t)
{
	while (not t.empty())
	{
		cout << t.front() << ' ';
		t.pop();
	}
}

void _print(int t) { cerr << t; }
void _print(string t) { cerr << t; }
void _print(char t) { cerr << t; }
void _print(lld t) { cerr << t; }
void _print(double t) { cerr << t; }
void _print(bool t) { cerr << t; }
void _print(deque<int> t)
{
	while (not t.empty())
	{
		cerr << t.front() << ' ';
		t.pop_front();
	}
}
void _print(queue<int> t)
{
	while (not t.empty())
	{
		cerr << t.front() << ' ';
		t.pop();
	}
}

template <class T, class V>
void print(pair<T, V> p);
template <class T>
void print(vector<T> v);
template <class T, class V>
void print(pair<T, V> p)
{
	print(p.ff);
	cout << " ";
	print(p.ss);
}
template <class T>
void print(vector<T> v)
{
	for (T i : v)
	{
		print(i);
		cout << " ";
	}
}

template <class T, class V>
void _print(pair<T, V> p);
template <class T>
void _print(vector<T> v);
template <class T>
void _print(set<T> v);
template <class T, class V>
void _print(map<T, V> v);
template <class T>
void _print(multiset<T> v);
template <class T, class V>
void _print(pair<T, V> p)
{
	cerr << "{";
	_print(p.ff);
	cerr << ",";
	_print(p.ss);
	cerr << "}";
}
template <class T>
void _print(vector<T> v)
{
	cerr << "[ ";
	for (T i : v)
	{
		_print(i);
		cerr << " ";
	}
	cerr << "]";
}
template <class T>
void _print(set<T> v)
{
	cerr << "[ ";
	for (T i : v)
	{
		_print(i);
		cerr << " ";
	}
	cerr << "]";
}
template <class T>
void _print(multiset<T> v)
{
	cerr << "[ ";
	for (T i : v)
	{
		_print(i);
		cerr << " ";
	}
	cerr << "]";
}
template <class T, class V>
void _print(map<T, V> v)
{
	cerr << "[ ";
	for (auto i : v)
	{
		_print(i);
		cerr << " ";
	}
	cerr << "]";
}

/* -------------------------------------  DEBUG ENDS --------------------------------- */

int n, m;
const int inf = 1e9;

/*
Clara and Jake are on a trip. They are driving in turns and car is being changed after every city.
Find shortest path from source to destination, such that Clara drove least miles. Also mention 
whos should start driving the car at 1st turn.
*/

void solve()
{
	cin >> n >> m;
	vpi g[n + 1];
	rep(i, 0, m)
	{
		int u, v, w;
		cin >> u >> v >> w;
		g[u].pb({v, w});
		g[v].pb({u, w});
	}

	set<arr(3)> s;
	vvi dist(n + 1, vi(2, inf));
	vvi vis(n + 1, vi(2, 0));
	s.insert({0, 1, 0});
	s.insert({0, 1, 1});		// {d,cur,prevTurn}

	// 1 -> previous turn was of John
	// 0 -> ___________________  Clara

	while (not s.empty())
	{
		auto it = s.begin();
		int cur = it->at(1), d = it->at(0), flag = it->at(2);
		s.erase(it);

		if (vis[cur][flag])
			continue;
		vis[cur][flag] = 1;
		dist[cur][flag] = d;

		for (auto nb : g[cur])
		{
			int node = nb.ff, wt = nb.ss;
			{
				if (flag == 1)
					s.insert({d + wt, node, 0});
				else
					s.insert({d, node, 1});
			}
		}
	}
	cout << min(dist[n][0], dist[n][1]);
}

signed main()
{
	// IO();

	// testcase(tt);
	solve();
}
