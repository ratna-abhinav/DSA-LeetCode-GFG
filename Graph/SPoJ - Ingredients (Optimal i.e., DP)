#include <bits/stdc++.h>
using namespace std;

#define int long long
int tt;
void solve();

void IO()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

// #ifndef ONLINE_JUDGE
//     freopen("input.txt", "r", stdin);
//     freopen("output.txt", "w", stdout);
//     freopen("Error.txt", "w", stderr);
// #endif
}

void testcase(int t)
{
	cin >> t;
	while (t--) solve();
}

typedef long long ll;
typedef long double lld;

#define ff first
#define ss second
#define pi pair<int, int>
#define vi vector<int>
#define vs vector<string>
#define vc vector<char>
#define pv pair<vi, vi>
#define vpi vector<pi>
#define vvi vector<vi>
#define vvc vector<vc>
#define vvvi vector<vvi>
#define vvvvi vector<vvvi>
#define vvpi vector<vpi>
#define vvvpi vector<vvpi>
#define pb push_back
#define mp make_pair
#define arr(k) array<int, k>
#define var(k) vector<arr(k)>
#define all(v) v.begin(), v.end()
#define unq(v) v.erase(unique(all(v)), v.end());
#define len(v) (int)v.size()
#define rep(i, a, b) for(int i=a; i<b; i++)
#define each(nb, x) for (auto &nb:x)
#define pll pair<ll, ll>
#define vll vector<ll>
#define vpll vector<pll>
#define vvll vector<vll>
#define nl '\n'


/*  ------------------------    BASIC INPUT -------------------------------  */

void read() {}
void read(int &a) {cin >> a;}
void read(string &s) {cin >> s;}
void read(double &a) {cin >> a;}
void read(lld &a) {cin >> a;}
template<typename x, typename y> void read(pair<x, y> &a) {read(a.first), read(a.second);}
template<typename x>void read(x &a) {for (auto  &i : a) read(i);}
template<typename x, typename... y> void read(x& a, y&... b) {read(a); read(b...);}
template<class T> void cmin(T&a, T b) {a = min(a, b);}
template<class T> void cmax(T&a, T b) {a = max(a, b);}

/*    ------------------------------------------------------------------   */


/* -------------------------------------  DEBUG STARTS ------------------------------- */

#ifndef ONLINE_JUDGE
#define dbg(x) cerr << #x << " = "; _print(x); cerr << endl;
#else
#define dbg(x)
#endif

void print(int t) {cout << t;}
void print(string t) {cout << t;}
void print(char t) {cout << t;}
void print(lld t) {cout << t;}
void print(double t) {cout << t;}
void print(bool t) {cout << t;}
void print(deque<int> t) {while (not t.empty()) {cout << t.front() << ' '; t.pop_front();}}
void print(queue<int> t) {while (not t.empty()) {cout << t.front() << ' '; t.pop();}}

void _print(int t) {cerr << t;}
void _print(string t) {cerr << t;}
void _print(char t) {cerr << t;}
void _print(lld t) {cerr << t;}
void _print(double t) {cerr << t;}
void _print(bool t) {cerr << t;}
void _print(deque<int> t) {while (not t.empty()) {cerr << t.front() << ' '; t.pop_front();}}
void _print(queue<int> t) {while (not t.empty()) {cerr << t.front() << ' '; t.pop();}}

template <class T, class V> void print(pair <T, V> p);
template <class T> void print(vector <T> v);
template <class T, class V> void print(pair <T, V> p) {print(p.ff); cout << " "; print(p.ss);}
template <class T> void print(vector <T> v) {for (T i : v) {print(i); cout << " ";}}

template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.ff); cerr << ","; _print(p.ss); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}

/* -------------------------------------  DEBUG ENDS --------------------------------- */

int n, m, s;
const int inf = 1e12;

/*
	GRAPH ????
	If Math, then WLOG ????
	EDGE CASES - like n = 1 etc.
	MULTIPLE EDGES, then maybe replace it by min()
	
	For Bug - Free Code, do Proper Simplification & Formulation

*/

/*
we'll iterate over every possible subset of the city that the
first kid will visit

now we know that, so we then have to do dp, in order to figure out the
order in which any of the kids will visit the shops

*/

vi shops;
vvi dist;
int dp[110][1<<8];

bool is_set(int x, int bit)
{
	bool set = (x >> bit) & 1;
	return set;
}

int rec(int i, int mask)
{
	// base case
	if (mask == 0)
		return 0;
	if (dp[i][mask] != -1)
		return dp[i][mask];

	int ans = inf;
	rep(j,0,s)
	{
		if (!is_set(mask, j)) continue;
		ans = min(ans, dist[i][shops[j]] + rec(shops[j], mask ^ (1<<j)));	
	}
	return dp[i][mask] = ans;
}

void solve()
{
	cin >> n >> m;
	dist = vvi(n, vi(n, inf));
	rep(i,0,m)
	{
		int u,v,w; cin >> u >> v >> w;
		dist[u][v] = min(dist[u][v], w);
		dist[v][u] = min(dist[v][u], w);
	}
	rep(i,0,n) dist[i][i] = 0;

	rep(k,0,n)
	{
		rep(i,0,n)
		{
			rep(j,0,n)
			{
				if (dist[i][k]<inf and dist[k][j]<inf)
					cmin(dist[i][j], dist[i][k] + dist[k][j]);
			}
		}
	}

	cin >> s;
	shops.assign(s, 0);
	rep(i,0,s) cin >> shops[i];
	int first_kid, second_kid; cin >> first_kid >> second_kid;
	int ans = inf;

	memset(dp, -1, sizeof dp);

	rep(mask,0,(1<<s))
	{
		int secondWant = (((1<<s) - 1) ^ mask);
		int curCost = rec(first_kid,mask) + rec(second_kid,secondWant);
		ans = min(ans, curCost);
	}
	cout << ans << nl;
}

signed main()
{
	IO();

	// testcase(tt);
	solve();
}
