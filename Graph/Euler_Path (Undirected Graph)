/*
  Euler Path - Coding Ninjas
  https://www.naukri.com/code360/problems/euler-path_1214547
*/


#include <bits/stdc++.h> 

vector<multiset<int>> graph;
void dfs1(int cur, vector<int> &vis, int &sz)
{
	sz++;
	vis[cur] = 1;
	for (auto nb:graph[cur])
	{
		if (vis[nb]) continue;
		dfs1(nb, vis, sz);
	}
}

vector<int> order;
void dfs2(int cur)
{
	while (!graph[cur].empty())
	{
		int nxt = *graph[cur].begin();
		graph[cur].erase(graph[cur].begin());
		graph[nxt].erase(graph[nxt].find(cur));
		dfs2(nxt);
	}
	order.push_back(cur);
}

vector<int> printEulerPath(int n, vector<vector<int>> &edgeList) {
	graph.clear(); graph.resize(n); vector<int> deg(n, 0);
	for (auto e:edgeList)
	{
		graph[e[0]].insert(e[1]);
		graph[e[1]].insert(e[0]);
		deg[e[0]]++; deg[e[1]]++;
	}
	vector<int> vis(n, 0);
	int cnt = 0;
	for (int i=0; i<n; i++)
	{
		if (vis[i]) continue;
		int sz = 0;
		dfs1(i, vis, sz);
		if (sz>1) cnt++;
	}
	if (cnt > 1) return {-1};
	int odd = 0, st = 0;
	for (int i=0; i<n; i++)
	{
		if (deg[i]&1)
		{
			st = i;
			odd++;
		}
	}
	if (odd!=2 && odd!=0) return {-1};
	order.clear();
	dfs2(st);
	return order;
}