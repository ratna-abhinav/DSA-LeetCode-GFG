Given two arrays A and B of size N and an integer K. You have to select K indexes i1,i2,i3....iK such that 
(A[i1]+A[i2]+A[i3]+……+A[iK]) / (B[i1]+B[i2]+B[i3]+……+B[iK]) is maximum.

The first line contains T, the number of test cases (1<=T<=10000).
The first line contains an integer N, K where 1<=N<=10^4, 1<=K<=N.
Next line contains N space-separated integers (1<=Ai<=1e4).
Next line contains N space-separated integers (1<=Bi<=1e4).

Sample Input:
3
3 2
10 9 7
3 5 4
8 3
4 4 2 1 5 3 2 5
2 2 2 5 3 5 2 3
1 1
1 
1

Sample Output:
2.428571
1.857143
1.000000

Solution:

#include <bits/stdc++.h>
using namespace std;
typedef long double ld;

signed main()
{
	int testcases;
	cin>>testcases;
	while(testcases--)
	{
		int n, k;
		cin >> n >> k;
		int arr[n], brr[n];
		for(int i=0; i<n; i++) cin>>arr[i];
		for(int i=0; i<n; i++) cin>>brr[i];

		ld low = 0.0, high = 1e8;
		for (int i=0; i<60; i++)
		{
			ld mid = (low + high) / 2;
			priority_queue<ld, vector<ld>, greater<ld>> pq;
			for(int i=0;i<n;i++)
			{
				pq.push(arr[i] - mid*brr[i]);
				if(pq.size() > k) pq.pop();
			}
			ld s = 0.0;
			while(pq.size())
			{
				s += pq.top();
				pq.pop();
			}
			if(s >= 0.0) low = mid;
			else high = mid;
		}
		cout << fixed << setprecision(6) << low << "\n";
	}
}
